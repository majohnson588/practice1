函数:
Example1:
#include<stdio.h>
int Add(int x, int y)      //加法自定义函数
{  
       int z = 0;
       z = x + y;
       return z;
}
int main()
{
      int a = 10;
      int b = 20;
      int sum = Add(a,b);

      printf("%d\n",sum);
      return 0;
}

Example2:
int main()
{
    char arr1[] = "bit";
    char arr2[20] = "###########";
    strcpy(arr2,arr1);
    printf("%s %s",arr1,arr2);
   
     //strcpy =string copy - 字符串拷贝
     //strcmp =string compare - 字符串对比
     //strlen  =string length - 字符串长度有关
     return 0;
} 

Example3:
int main()
{
     char arr[] = "hello world";
     memset(arr, 's', 5);//memset = memory set
     printf("%s\n",arr);
     //***** world
     return 0;
}

Example4:
//自定义求两个数间最大值的函数
//传值调用
int get_max(int x, int y)
{
       if(x>y)
            return x;
        else
            return y;
}
int main()
{
    int a = 10;
    int b =  20;
    //函数的使用
    int max =get_max(a,b);
    printf("max = %d\n",max);
    return 0;
}

Example5:
//自定义函数交换数字
//传址调用
void Swap1(int a,int b)
//不能完成任务
//当实参传给形参的时候
//形参只是实参的一份临时拷贝
//对形参的更改是不会影响实参的
{
   int tmp = 0;
        tmp = a;
             a= b;
             b = tmp;
}
void Swap2(int *pa,int *pb)
//能够完成任务
{
       int tmp = 0;
       tmp = *pa;//指针的运用
            *pa= *pb;
            *pb = tmp;
}

int main()
{
  int  a = 10;
  int  b = 20;
  printf("a=%d b=%d\n", a, b);
   //调用Swap1函数-传值调用
  Swap2(&a,&b);
  //调用Swap2函数
  printf("a=%d b=%d\n", a, b);
  return 0;
}

practise1:
//打印100-200间的素数
//是素数返回1，不是素数返回0
#include<stdio.h>
#include<math.h>
int is_prime(int n)
{
     int j = 0;
     for(j=2; j<=sqrt(n); j++)
     {
             if(n%j == 0)
                 return 0;
     }
                 return 1;
}
int main()
{
            //打印100-200之间的素数
    int i = 0;
    for(i=100; i<=200; i++)
     {
               //判断i是否为素数
              if(is_prime(i)  == 1)
                       printf("%d", i);
  }

practise2:
//写一个函数判断一年是否为闰年
int is_leap_year(int y)
{
     if((y%4==0&&y%100!=) || (y%400==0))
      return 1;
      else
      return 0;
}

int main()
{
     int year = 0;
     for(year=1000; year<=2000; year++)
     {   
                  //判断year是否为闰年
                 if( is_leap_year(year)  == 1)
                 {
                        printf(" %d ", year);
                 }
     } 
return 0;
}

Practise3:
#include <stdio.h>
#include <stdlib.h>
#include<string.h>
int binary_search(int arr[], int k, int sz)
{
         //算法的实现
      int left = 0;
      int right = sz - 1;

      while(left<=right)
      {
             int mid = (left+right)/2;//中间元素的下标
             if(arr[mid] < k)
              {
                     left = mid + 1;
              }
              else if(arr[mid] > k)
              {
                      right = mid - 1;
              }
                else
              {
                       return mid;
              }
         }
return -1 ;
}
int main()
{
        //二分整数
        //在一个有序的数组中查找具体的某个数
        //如果找到了返回这个数的下标，找不到就返回0
        //
        int arr[] = {1,2,3,4,5,6,7,8,9,10};
        int k = 7;
        int sz = sizeof(arr)/sizeof(arr[0]);
        //                                   传递过去的是数组arr首字母的地址，sz = 1；
        int ret = binary_search(arr , k ,sz);
        if(ret == -1)
        {
              printf("找不到指定的数字\n");
        }
        else 
        {
               printf("找到了，下标是: %d\n", ret);
        }
        return 0;
}

Practise4:
//设计一个函数，每调用一次增加1
void Add(int*p)
{
   (*p)++;//注意不要漏掉括号
}
int main()
{
    int num = 0;
    Add(&num);
    printf("num = %d\n", num);//1
    Add(&num);
    printf("num = %d\n", num);//2
    Add(&num);
    printf("num = %d\n", num);//3
    return 0;
 }
 
 函数的嵌套调用和链式访问
 Example1:  
 int main()
 {
     int len = 0;
     //1 
     //len = strlen("abc");
     //printf("%d\n",len);
     //2
     printf("%d\n",strlen("abc"));
     return 0;
 }
 
 Example2:
 int main()
 {
    printf("%d",printf("%d",printf("%d",43)));//"43"为两个字节，"2"为一个字节，所以打印出来的结果是4321
    return 0;
 }
 
函数的递归
Example1:
int my_strlen(char* str)//指针变量
{
   int count = 0;
   if(*str != '\0')
   {
      return 1+my_strlen(str+1);   
   }
   else 
      return 0;
}
int main()
{
  char arr[] = "bit";
  // int len = strlen(arr);
  //printf("%d\n",len);
  int len = my_strlen(arr);
  printf("len=%d\n",len);
  return 0;
}

递归与迭代
Example1:
//求n的阶乘
int Fac2(int n)
{
    if(n<=1)
          return 1;
    else
          return n*Fac2(n-1);
}
int main()
{
    //求n的阶乘
    int n = 0;
    scanf("%d",&n);
    ret = Fac2(n);//循环的方式
    printf("%d\n",ret);
    return 0;
}

Example2:
//求斐波那契数
A1:测试（效率低下，容易栈溢出）
int Fib(int n)
{  
     if(n<=2)
         return 1;
     else  
         return Fib(n-1)+Fib(n-2);
}
int main()
{
    int n = 0;
    int ret = 0;
    scanf("%d",&n);
    //TDD - 测试驱动开发,先设计怎么测试，再设计函数怎么实现
   ret = Fib(n);
   printf("ret = %d\n",ret);
   return 0 ;
}
A2:优化算法
int Fib(int n)
{  
   int a = 1;
   int b = 1;
   int c = 1;
   while(n>2)
  {
        c = a + b;
        a = b;
        b = c;
        n--;
  }
  return c;
}
int main()
{
    int n = 0;
    int ret = 0;
    scanf("%d",&n);
    //TDD - 测试驱动开发,先设计怎么测试，再设计函数怎么实现
   ret = Fib(n);
   printf("ret = %d\n",ret);
   return 0 ;
}



数组
Example1:   
int main()
{
    //创建一个数组-存放整形-10个
    //int arr[10] = {1，2，3};//不完全初始化,剩下的元素默认初始化为0
    //char arr2[5] = {‘a',   'b'};
    //char arr2[5] = {'a',  98};//"98"在ASCII码值中表示小写字母b
    //char arr3[5] = "ab";//后面还有一个/0
    printf("%d\n", sizeof(arr4));
    //sizeof 计算 arr4所占空间的大小
    //7个元素-char 7*1 = 7
    printf("%d\n",strlen(arr4));
    //strlen 求字符串的长度-'\0'之前的字符个数   
    //[a b c d e f \0]
    //int n = 5;
    //char ch[n];//err:[]中只能输入常量，不能输入变量
    char arr1[] = "abc";
    char arr2[] = {'a', 'b', 'c'};
    printf("%d\n",sizeof(arr1));//4
    printf("%d\n",sizeof(arr2));//3
    printf("%d\n",strlen(arr1));//3
    printf("%d\n",strlen(arr2));//随机值
    return 0;
}
tips:
1.strlen和sizeof没有什么关联
2.strlen是求字符串长度-只能针对字符串求长度 - 库函数 - 使用得引头文件
3.sizeof计算变量、数组、类型的大小-单位是字节-操作符

Example2:
int main
{
      char arr[] = "abcdef";
      //printf("%c\n", arr[3])
      int i = 0;
      for(i=0; i<(int)strlen(arr); i++)
      {
            printf("%c ", arr[i]);
      };
      int arr[] = {1,2,3,4,5,6,7,8,9,0};
      int sz = sizeof(arr)/sizeof(arr[0]);
      int i = 0;
      for(i=0; i<sz; i++)
      {
              printf("%d",arr[i]); 
      }
      return 0;
}

Example3:
int main()
{
   int arr[] = {1,2,3,4,5,6,7,8,9,10};
   int sz = sizeof(arr)/sizeof(arr[0]);
   int i = 0;
   for(i=0;i<sz;i++)
   {
      printf("&arr[%d] = %p\n", &arr[i]);
   }
   return 0;
}
打印结果:
&arr[0] = 00000053251ffa20
&arr[1] = 00000053251ffa24
&arr[2] = 00000053251ffa28
&arr[3] = 00000053251ffa2c
&arr[4] = 00000053251ffa30
&arr[5] = 00000053251ffa34
&arr[6] = 00000053251ffa38
&arr[7] = 00000053251ffa3c
&arr[8] = 00000053251ffa40
&arr[9] = 00000053251ffa44
16进制:0-9 10-15 a b c d e f
地址从低往高走

指针运算
指针+-整数
int main()
{
      int arr[10] = { 1,2,3,4,5,6,7,8,9,10 }；
      int i = 0;
      int sz = sizeof(arr)/sizeof(arr[0]);
      int* p = &arr[9];
      for(i = 0;i < sz; i++)
      {
              printf("%d ",  *p);
              p+=1;
      }
      for(i = 0; i < 5; i++)
      {
                printf("%d ", *p);
      }
      return 0；
}

#define N_VALUES 5
float values[N_VALUES];
float *vp;
//指针+-整数，指针的关系运算
for(vp = &values[0]; vp < &values[N_VALUES];)
{
         *vp++ = 0;
}

指针-指针
int main()
{
       char ch[5] = {0};
       int arr[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
       &arr[9] - &arr[0];//得到的是指针之间元素的个数;
       &arr[9] - &ch[0];error
       return 0;
}

int my_stren(char* str)  
{
          char* start = str;
          char* end = str;
          while (*end != '\0')
          {
                end++;
          }
         return end - start;//
}
int main()
{
       //strlen - 求字符串长度
       //递归 - 模拟实现了strlen - 计数器的方式1. 递归的方式
       char arr[ ] = "bit";
       int len = my_strlen(arr);
       printf("%d\n", len);
       return 0;
}

指针的关系运算
#define N_VALUES 5
float values[N_VALUES];
float *vp;
for(vp = &values[N_VALUES]; vp > &values[0];)
{
         *--vp = 0;
}

Exercise1:
按要求实现数组
1.初始化数组全0
2.实现print()打印数组的每个元素
3.实现reverse()函数完成数组元素的逆置
void Init(int arr[], int sz)
{
    int i = 0;
    for(i=0;i<sz;i++)
    {
       arr[i] = 0;
    }
}
void Print(int arr[], int sz)
{
   int i = 0;
   for(i = 0;i < sz;i++)
   {
       printf("%d ",arr[9]);
   }
   printf("\n");
}
Void Reverse(int arr[], int sz)
{
    int left = 0;
    int right = sz - 1;
    while(left<right)
    {
        int tmp = arr[left];
        arr[left] = arr[right];
        arr[right] = tmp;
        left++;
        right--;
    }
 }
int main()
{
     int arr[10] = { 0 };
     int sz = sizeof(arr) / sizeof(arr[0]);
     Init(arr, sz);//把数组初始化0
     Print(arr,sz);//打印
     Reverse(arr,sz);
     Print(arr,sz);//打印
     return 0;
}

Exercise2:
//对两个数组进行交换
int main()
{
     int arr1[] = { 1, 3, 5, 7, 9};
     int arr2[] = { 2, 4, 6, 8, 0};
     int tmp = 0;
     int i;
     int sz = sizeof(arr1)/sizeof(arr1[0]);
     for (i = 0;i < sz; i++)
     {
         tmp = arr1[i];
         arr2[i] = arr1[i];
         arr1[i] = tmp;
     }
 }
 
 Exercise3:
 int i;//全局变量，不初始化，默认是0
 int main()
 {
     i--;
     //-1
     //10000000000000000000000000000001
     //11111111111111111111111111111110
     //11111111111111111111111111111111
     //
     if(i > sizeof(i)) //sizeof()-计算变量/类型所占内存大小 >=0 无符号数
        printf(">\n");
     else
        printf("<\n");
     return 0;
 }
 
 Exercise4:
 求下面a,b,c的值
 #include <stdio.h>
 int main()
 {
      int a, b, c;
      a = 5;
      c = ++a;  c=a=6;
      b = ++c, c++, ++a, a++;  a=c=8 b=7
      b += a++ + c; b=23 c=8 a=9
      printf("a = %d b = %d c = %d\n", a, b, c);
      return 0;
  }
  
  Exercise4:
  求下面打印出来的结果
  #include <stdio.h>
  int main()
  {
     arr[] = {1,2,3,4,5};
     short *p = (short*)arr;
     int i = 0;
     for(i=0;i<4;i++)
     {
         *(p+i) = 0;
     }
     for(i=0;i<5;i++)
     {
           printf("%d ", arr[i]);/0 0 3 4 5
     }
     return 0;
 }
 
 Exercise5:
 求下面二进制数字（补码）中1的个数
 A1:
 int count_bit_one(unsigned int n)
 {
     int count = 0;
     while(n)
     {
         if(n % 2 == 1)
         {
             count++;
         }
         n = n / 2;
     }
     return count;
  }
 int main()
 {
     int a = 0;
     scanf("%d",&a);
     int count = count_bit_one(a);//-1
     //-1
     //10000000000000000000000000000001
     //11111111111111111111111111111110
     //11111111111111111111111111111111
     
     //13
     //00000000000000000000000000001101
     //
     printf("count = %d\n", count);
     //system("pause");//system库函数-执行系统命令-pause（暂停）
     return 0;
 }
 
A2:
int count_bit_one(int n)
{
   int count = 0;
   while(n)
   {
       n = n&(n - 1);
       count++;
   }
    return count;
}
int main()
 {
     int a = 0;
     scanf("%d",&a);
     int count = count_bit_one(a);//-1
     //-1
     //10000000000000000000000000000001
     //11111111111111111111111111111110
     //11111111111111111111111111111111
     
     //13
     //00000000000000000000000000001101
     //
     printf("count = %d\n", count);
     //system("pause");//system库函数-执行系统命令-pause（暂停）
     return 0;
 }
 
 Exercise6:
 //求两个int整数m和n的二进制表达中，有多少个位（bit）不相同
 int get_diff_bit(int m,int n)
 {
     int tmp = m^n;
     int count = 0;
     //return count_bit_one(tmp);
     while(tmp)
     {
        tmp = tmp&(tmp - 1);
        count++;
     }
     return count;
 }
 int main()
 {
    int m = 0;
    int n = 0;
    scanf("%d%d", &m, &n);
    int count = get_diff_bit(m,n);
    printf("count = %d\n",count);
    return 0;
 }
 
 Exercise7:
 //打印二进制的奇数位和偶数位
 void print(int m)
 {
     int i = 0;
     printf("奇数位：\n");
     for(i = 30;i >= 0;i -= 2)
     {
         printf("%d ",(m >> i) & 1);
     }
     printf("\n");
     printf("偶数位：\n");
     for(i = 31;i >= 0;i -= 2)
     {
         printf("%d ",(m >> i) & 1);
     }
     printf("\n");
 }
 int main()
 {
    int m = 0;
    scanf("%d", &m);
    print(m);
    return 0;
 }
 
 Exercise8：
 void print(int* p,int sz)
 {
     int i = 0;
     for(i = 0;i < sz;i++)
     {
         printf("%d ",*(p+i));
     }
 }
 int main()
 {
     int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, };
     int sz sizeof(arr) / sizeof(arr[0]);
     print(arr,sz);
     return 0;
 }
 
 Exercise9:
 //求以下递归返回的值
 int Fun(int a)
 {
     if(n==5)
         return 2;
     else
         return 2*Fun(n+1)；
  }
  A:Fun(2) = 2^4 = 16
  
  Exercise10:
  //打印n的乘法口诀表
  void print_table(int n)
  {
      int i = 0;
      for(i = 1;i <= n; i++)
      {
         int j = 0;
         for(j = 1;j <=i; j++)
         {
             printf("%d*%d = %-3d", i , j, i*j);
         }
        printf("\n");
      }
  }
  int main()
  {
      int n = 0;
      scanf("%d", &n);
      print_table(n);
      return 0;
  }
  
  Exercise11
  //设计函数使字符串逆置排列(要求不使用库函数)
  A1:
  int my_strlen(char* str)
  {
      int count = 0;
      while(*str != '\0')
      { 
          count++;
          str++;
      }
      return count;
  }
  void reverse_string(char* arr)
  {
      int left = 0;
      int right = my_strlen(arr)-1;
    while(left<right)
  {
      int tmp = arr[lrft];
      arr[left] = arr[right];
      arr[right] = tmp;
      left++;
      right--;
  }
  int main()
  {
      char arr[] = "abcdef";
      reverse_string();
      return 0;
  }
  A2：递归法（较难理解）
  void reverse_string(char* arr)
  {
      char tmp = arr[0];
      int len = my_strlen(arr);
      arr[0] = arr[len - 1];
      arr[len - 1] = '\0';
      if(my_strlen(arr+1) >= 2)
         reverse_string(arr+1);
      arr[len - 1] = tmp;
  }
  int main()
  {
      char arr[] = "abcdefg";//fedcba
      reverse_string(arr);
      printf("%s\n", arr);
      return 0;
  }
  
  Exercise12:
  //输入一个非负整数，返回组成它的数字之和(使用递归)
  int DigitSum(unsigned int num)
  {
      if(num > 9)
      {
      return DigitSum(num / 10) + num % 10;
      }
      else
      {
          return num;
      }
  }
  int main()
  {
      unsigned int num = 0;
      scanf("%d",&num);//1729
      int ret = DigitSum(num);
      printf("ret = %d\n", ret);
      return 0;
  }
  
  Exercise13:
  写一个函数实现n的k次方（使用递归）
  double Pow(int n, int k)
  {
       //n^k = n*n^(k-1)
       if(k < 0)
          return (1.0 / (Pow(n, -k)));
       else if(k == 0)
          return 1;
       else
          return n*Pow(n, k - 1);
  }
  int main()
  {
      int n = 0;
      int k = 0;
      scanf("%d%d", &n, &k);
      double ret = Pow(n,k);
      printf("ret = %lf\n", ret);
      return 0;
  }
  
结构体变量的定义和初始化
struct Point
{
        int x;
        int y;
}p1;                                       //声明类型的同时定义变量p1
struct Point p2;                           //定义结构体变量p2
//初始化：定义变量的同时赋初值。
struct Point p3  =  {x , y};

struct Stu                                    //类型声明

struct S
{
      int a;
      char c;
      char arr[20];
      double d;
};

struct T
{
      char ch[10];
      struct S s;
      char *pc;
};

int main()
{
      char arr[ ] = "hello bit\n";
      struct T t = {"hehe",  {100, 'w', "hello world", 3.14}, arr};//结构体的嵌套
      printf("%s\n", t. ch);//hehe
      printf("%s\n", t. s. arr);//hello world
      printf("%lf\n", t .s .d);//3.14
      printf("%s\n", t .pc);//hello bit
      return 0;
}

  
