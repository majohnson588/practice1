practise1:
//打印100-200间的素数
//是素数返回1，不是素数返回0
#include<stdio.h>
#include<math.h>
int is_prime(int n)
{
     int j = 0;
     for(j=2; j<=sqrt(n); j++)
     {
             if(n%j == 0)
                 return 0;
     }
                 return 1;
}
int main()
{
            //打印100-200之间的素数
    int i = 0;
    for(i=100; i<=200; i++)
     {
               //判断i是否为素数
              if(is_prime(i)  == 1)
                       printf("%d", i);
  }

practise2:
//写一个函数判断一年是否为闰年
int is_leap_year(int y)
{
     if((y%4==0&&y%100!=) || (y%400==0))
      return 1;
      else
      return 0;
}

int main()
{
     int year = 0;
     for(year=1000; year<=2000; year++)
     {   
                  //判断year是否为闰年
                 if( is_leap_year(year)  == 1)
                 {
                        printf(" %d ", year);
                 }
     } 
return 0;
}

Practise4:
#include <stdio.h>
#include <stdlib.h>
#include<string.h>
int binary_search(int arr[], int k, int sz)
{
         //算法的实现
      int left = 0;
      int right = sz - 1;

      while(left<=right)
      {
             int mid = (left+right)/2;//中间元素的下标
             if(arr[mid] < k)
              {
                     left = mid + 1;
              }
              else if(arr[mid] > k)
              {
                      right = mid - 1;
              }
                else
              {
                       return mid;
              }
         }
return -1 ;
}
int main()
{
        //二分整数
        //在一个有序的数组中查找具体的某个数
        //如果找到了返回这个数的下标，找不到就返回0
        //
        int arr[] = {1,2,3,4,5,6,7,8,9,10};
        int k = 7;
        int sz = sizeof(arr)/sizeof(arr[0]);
        //                                   传递过去的是数组arr首字母的地址，sz = 1；
        int ret = binary_search(arr , k ,sz);
        if(ret == -1)
        {
              printf("找不到指定的数字\n");
        }
        else 
        {
               printf("找到了，下标是: %d\n", ret);
        }
        return 0;
}

Practise5:
//设计一个函数，每调用一次增加1
void Add(int*p)
{
   (*p)++;//注意不要漏掉括号
}
int main()
{
    int num = 0;
    Add(&num);
    printf("num = %d\n", num);//1
    Add(&num);
    printf("num = %d\n", num);//2
    Add(&num);
    printf("num = %d\n", num);//3
    return 0;
 }
 
 函数的嵌套调用和链式访问
 Example1:  
 int main()
 {
     int len = 0;
     //1 
     //len = strlen("abc");
     //printf("%d\n",len);
     //2
     printf("%d\n",strlen("abc"));
     return 0;
 }
 
 Example2:
 int main()
 {
    printf("%d",printf("%d",printf("%d",43)));//"43"为两个字节，"2"为一个字节，所以打印出来的结果是4321
    return 0;
 }
     
